name: Deploy website
on:
    push:
        branches:
            - master
jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Get code
              uses: actions/checkout@v3
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.npm # 저장되는 경로 yarn은 ~/.cache/yarn
                  key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} # package-lock.json 파일의 해시를 기준으로 캐시 키를 생성
            - name: Install dependencies
              run: npm ci # yarn은 yarn install 또는 엄격하게 하려면 yarn install --frozen-lockfile
            - name: Lint code
              run: npm run lint
            - name: Test code
              run: npm run test
    build:
        needs: test
        runs-on: ubuntu-latest
        outputs:
            script-file: ${{ steps.publish.outputs.asdasd }}
        steps:
            - name: Get code
              uses: actions/checkout@v3
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.npm
                  key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
            - name: Install dependencies
              run: npm ci
            - name: Build website
              run: npm run build
            - name: Publish JS filename
              id: publish
              run: find dist/assets/*.js -type f -execdir echo 'asdasd={}' >> $GITHUB_OUTPUT ';' # js파일 찾은 후 파일명 출력
            - name: Upload artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: dist-files
                  path: dist # 포함할거
                  # path: |
                  #     dist
                  #     package.json
    deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Get build artifacts
              uses: actions/download-artifact@v3 # 업로드한 아티팩트 다운로드
              with:
                  name: dist-files
            - name: Output contents
              run: ls
            - name: Output filename
              run: echo "${{ needs.build.outputs.script-file }}"
            - name: Deploy
              run: echo "Deploying..."
# Job Artifacts는 작업 결과물을 저장하고 공유하기 위해 사용되는 기능

# outputs 섹션은 해당 작업에서 생성된 결과물을 정의하는 부분입니다. 여기서는 "script-file"이라는 이름의 출력을 정의하고, 이 출력은 ${{ steps.publish.outputs.asdasd }}의 값을 가지도록 설정되어 있습니다. 이 값은 publish 단계에서 asdasd라는 이름의 출력을 가진다고 가정합니다.

# steps에는 여러 단계가 정의되어 있습니다:

# "Get code" 단계는 actions/checkout@v3 액션을 사용하여 코드를 가져옵니다.

# "Install dependencies" 단계에서는 npm ci 명령을 통해 종속성을 설치합니다.

# "Build website" 단계에서는 npm run build 명령을 사용하여 웹사이트를 빌드합니다.

# "Publish JS filename" 단계는 find 명령어를 사용하여 dist/assets/*.js 경로에서 js 파일을 찾고, 해당 파일명을 출력합니다. publish 단계의 id를 사용하여 출력 값을 ${{ steps.publish.outputs.asdasd }}에 저장합니다.

# "Upload artifacts" 단계는 actions/upload-artifact@v3 액션을 사용하여 dist 경로의 파일을 dist-files라는 이름의 아티팩트로 업로드합니다. 이렇게 업로드된 아티팩트는 이후에 다른 작업이나 워크플로우에서 사용할 수 있습니다.

# 이렇게 설정된 워크플로우는 "test" 작업이 성공적으로 완료된 후에 "build" 작업이 실행되며, 웹사이트를 빌드하고 빌드된 파일을 아티팩트로 업로드합니다. 또한, "Publish JS filename" 단계에서는 js 파일명을 출력하여 ${{ steps.publish.outputs.asdasd }}로 사용할 수 있도록 합니다.
